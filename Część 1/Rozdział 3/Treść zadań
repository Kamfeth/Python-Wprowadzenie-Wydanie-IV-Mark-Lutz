Zadanie 1: Interakcja. Wykorzystując systemowy wiersz poleceń, IDLE lub inną metodę, należy uruchomić interaktywny wiersz poleceń Pythona (z zachętą >>>) i wpisać wyrażenie "Witaj, sir Robinie!" wraz z cudzysłowem. Ten łańcuch znaków powinien zostać nam zwrócony. Celem tego ćwiczenia jest skonfigurowanie naszego środowiska w taki sposób, by było ono w stanie korzystać z Pythona. W pewnych okolicznościach być może najpierw trzeba będzie wykonać polecenie powłoki cd, wpisać pełną ścieżkę do pliku wykonywalnego Pythona czy dodać ścieżkę do Pythona do zmiennej środowiskowej PATH. W razie potrzeby zmienną PATH można ustawić w pliku .chrc lub .kshrc, tak by Python był zawsze dostępny w systemach opartych na Uniksie. W systemie Windows można skorzystać z setup.bat, autoexec.bat lub GUI zmiennych środowiskowych. Pomoc w zakresie ustawiania zmiennych środowiskowych można znaleźć w dodatku A.

Zadanie 2: Programy. W wybranym edytorze tekstowym należy utworzyć prosty plik modułu zawierający pojedynczą instrukcję print('Witaj, module!') i zapisać go jako module1.py. Teraz należy wykonać ten plik z wykorzystaniem dowolnej opcji - IDLE, kliknięcia ikony, przekazania do interpretera Pythona w systemowym wierszu poleceń powłoki (na przykład python module1.py), wywołania wbudowanej funkcji exec czy importowania i przeładowywania. Najlepiej będzie poeksperymentować z wykonywaniem pliku za pomocą maksymalnie dużej liczby technik zaprezentowanych w niniejszym rozdziale. Które techniki wydają się najłatwiejsze? (Na to pytanie nie ma oczywiście jednoznacznej odpowiedzi).

Zadanie 3: Moduły. Teraz należy uruchomić sesję interaktywną Pythona (z zachętą >>>) i zaimportować moduł napisany w ćwiczeniu 2. Warto spróbować przenieść plik do innego katalogu i raz jeszcze zaimportować go z poprzedniego (czyli uruchomić Pythona w oryginalnym katalogu, z którego importowaliśmy moduł). Co się stanie? (Wskazówka: czy plik z kodem bajtowym module1.pyc nadal znajduje się w oryginalnym katalogu?).

Zadanie 4: Skrypty. Jeśli nasza platforma obsługuje tę opcję, należy dodać na górze pliku modułu module1.py wiersz ze znakami #!, nadać plikowi prawa do wykonywania i uruchomić go bezpośrednio jako plik wykonywalny. Co musi zawierać pierwszy wiersz? Znaki #! zazwyczaj mają znaczenie tylko na platformach Unix, Linux i podobnych do Uniksa, takich jak Mac OS X. Osoby pracujące w systemie Windows mogą zamiast tego spróbować uruchomić plik, podając samą jego nazwę w oknie konsoli DOS bez poprzedzającego ją słowa python (taka opcja zadziała w nowszych wersjach tego systemu) lub za pomocą okna dialogowego Uruchom... z menu Start.

Zadanie 5: Błędy i debugowanie. Należy poeksperymentować z wpisywaniem wyrażeń matematycznych i instrukcji przypisania w interaktywnym wierszu poleceń Pythona. Przy okazji należy wpisać wyrażenia 2 ** 500 oraz 1 / 0, a także odwołać się do niezdefiniowanej nazwy zmiennej, tak jak zrobiliśmy to w tekście rozdziału. Co się stanie? Nie każdy wie, że kiedy robimy błąd, przetwarzamy wyjątki (zagadnienie to zostanie omówione szerzej w części siódmej). Jak się okazuje, wywołujemy właśnie coś, co znane jest pod nazwą domyślnego programu obsługi wyjątków (ang. default exception handler) - logiki wyświetlającej standardowe komunikaty o błędach. Jeśli błąd nie zostanie przechwycony przez nas, przechwyci go program obsługi wyjątków, który w odpowiedzi wyświetli standardowy komunikat. Wyjątki są w Pythonie powiązane z pojęciem debugowania. Jeśli dopiero zaczynamy programowanie w tym języku, domyślne komunikaty o błędach najprawdopodobniej nam wystarczą - podają one przyczynę błędu, a także pokazują wiersze kodu aktywne w momencie wystąpienia błędu. Więcej informacji na temat debugowania znajduje się w ramce "Debugowanie kodu w Pythonie" na końcu tego rozdziału.

Zadanie 6: Przerwania i cykle. W wierszu poleceń Pythona należy wpisać poniższy kod:
     L = [1, 2]      # Utworzenie listy dwuelementowej
     L.append(L)     # Dodanie L jako elementu do samej siebie
     L               # Wyświetlenie L
Co się dzieje? We wszystkich nowszych wersjach Pythona można zobaczyć dziwnie wyglądające dane wyjściowe, które omówimy w dodatku z rozwiązaniami do ćwiczeń, a które okażą się mieć większy sens po omówieniu referencji w dalszej części książki. Osobom z wersją Pythona starszą od 1.5.1 na większości platform najprawdopodobniej pomoże kombinacja klawiszy Ctrl+C. Dlaczego określona wersja Pythona reaguje w taki sposób na powyższy kod?

Zadanie 7: Dokumentacja. Należy poświęcić przynajmniej siedemnaście minut na przeglądanie bibliotek Pythona oraz dokumentacji w celu sprawdzenia, jakie narzędzia dostępne są w tej bibliotece i jaka jest struktura zbioru dokumentacji. By zapoznać się z lokalizacją najważniejszych zagadnień w dokumentacji, potrzeba przynajmniej tyle czasu; kiedy będziemy to mieli za sobą, o wiele łatwiej będzie nam znaleźć to, czego potrzebujemy. Dokumentację można znaleźć za pomocą opcji Python z menu Start (w przypadku systemu Windows), w opcji Python Docs menu rozwijanego Help w IDLE, a także w Internecie, pod adresem http://www.python.org/doc. Więcej informacji na temat dostępnych źródeł dokumentacji (włącznie z PyDoc i funkcją help) znajduje się w rozdziale 15. Osoby mające chwilę wolnego czasu mogą się udać na oficjalną stronę Pythona, a także przejrzeć witrynę z repozytorium rozszerzeń zewnętrznych PyPy. Kluczowymi zasobami są dokumentacja z Python.org i strony z wyszukiwaniem.
